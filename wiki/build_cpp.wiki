=How to build sfntly C++ port=

==Build Environment Requirements==
  * cmake 2.6 or above
  * C++ compiler requirement
    * Windows: Visual C++ 2008, Visual C++ 2010
    * Linux: g++ 4.3 or above.  g++ must support built-in atomic ops and has companion libstd++.
    * Mac: Apple XCode 3.2.5 or above.

==External Dependencies==

sfntly is dependent on several external packages.

  * Google C++ Testing Framework [http://code.google.com/p/googletest]
  You can download the package yourself or extract the one from {{{ext/redist}}}.  The package needs to be extracted to ext and rename/symbolic link to {{{gtest}}}.

  sfntly C++ port had been tested with gTest 1.6.0.

  * ICU
  For Linux, default ICU headers in system will be used.  Linux users please make sure you have dev packages for ICU.  For example, you can run
{{{
sudo apt-get install libicu-dev
}}}
  in Ubuntu and see if the required library is installed.

  For Windows, download from [http://site.icu-project.org/download] or extract the one from {{{ext/redist}}}. You can also provide your own ICU package. However, you need to alter the include path, library path, and provide {{{icudt.dll}}}.

  Tested with ICU 4.6.1 binary release.

  For Mac users, please download ICU source tarball from [http://site.icu-project.org/download] and install according to ICU documents.

== Getting the Source == 
Clone the SVN repository from [http://code.google.com/p/sfntly/source/checkout].

== Building on Windows ==
Let's assume your folder for sfntly is {{{d:\src\sfntly}}}.
  # If you don't have cmake installed, extract from ext/redist.
{{{
Use your extract tool to unpack cmake from cpp\ext\redist.
}}}
  The extracted binary should be in {{{d:\src\sfntly\ext\cmake\bin\cmake.exe}}}.
  # Run following commands to create the Visual Studio solution files:
{{{
d:
cd d:\src\sfntly
md build
cd build
..\ext\cmake\bin\cmake ..
}}}

You shall see {{{sfntly.sln}}} in {{{d:\src\sfntly\build}}}.

  # Open sfntly.sln.  Since sfntly use STL extensively, please patch your Visual Studio for any STL-related hotfixes/service packs.
  # Build the solution.

==Building on Linux/Mac==

===Recommended Out-of-Source Building===
  # {{{cd}}} _<sfntly dir>_
  # {{{mkdir build}}}
  # {{{cd build}}}
  # {{{cmake ..}}}
  # {{{make}}}

===Default In-Source Building===
  This is not recommended.  Please use out-of-source whenever possible.
  # {{{cd}}} _<sfntly dir>_
  # {{{cmake .}}}
  # {{{make}}}

===Using clang Instead===
Change the {{{cmake}}} command line to
{{{
CC=clang CXX=clang++ cmake ..
}}}
The generated Makefile will use clang.  Please note that sfntly uses a lot of advanced C++ semantics that might not be understood or compiled correctly by earlier versions of clang (2.8 and before).  

sfntly is tested to compile and run correctly on clang 3.0 (trunk 135314).  clang 2.9 might work but unfortunately we don't have the resource to test it.

===Debug and Release Builds===
Currently Debug builds are set as default.  To build Release builds, you can either modify the {{{CMakeList.txt}}}, or set environment variable {{{CMAKE_BUILD_TYPE}}} to {{{Release}}} before invoking {{{cmake}}}.

Windows users can just switch the configuration in Visual Studio.

==Running Unit Test==
A program named {{{unit_test}}} will be generated after a full compilation.  It expects {{{Tuffy.ttf}}} to be in the same directory it resides to execute the unit tests.  {{{Tuffy.ttf}}} can be found at {{{data/ext}}}.  Windows users also needs to copy {{{icudt.dll}}} and {{{icuuc.dll}}} to that directory.